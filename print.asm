%include "print.mac"

section .data

DEF_STR_DATA newline, 10

section .text

global print
global print_num

global newline
global newline_len ; generated by DEF_STR_DATA

; rax: pointer to string
; rbx: string length
print:
	push rax
	push rdi
	push rsi
	push rdx

	mov rsi, rax ; string pointer
	mov rdx, rbx ; string length
	mov rax, 1   ; system call write
	mov rdi, 1   ; fd stdout
	syscall

	pop rdx
	pop rsi
	pop rdi
	pop rax
	ret

; rax: number
print_num:
	push rax
	push rbx
	push rdx
	push rbp
	mov rbp, rsp

	mov rbx, 10 ; for idiv

	print_num_loop1:
		mov rdx, 0
		idiv rbx ; divide [rdx:rax] by rbx

		push rdx ; save new digit
		add byte [rsp], '0' ; add code of 0 to get ASCII char code

		cmp rax, 0
		jne print_num_loop1

	print_num_loop2:
		mov rax, rsp
		mov rbx, 1
		call print

		add rsp, 8
		cmp rsp, rbp
		jne print_num_loop2

	mov rsp, rbp
	pop rbp
	pop rdx
	pop rbx
	pop rax
	ret

; vim:ft=nasm
