%include "print_int.mac"
%include "syscall.mac"

section .data

DEF_STR_DATA newline, 10

section .text

global print
global print_num

global newline
global newline_len ; generated by DEF_STR_DATA

; rax: pointer to string
; rdx: string length
print:
	mov rcx, STDOUT
	call write
	ret

; rax: number
print_num:
	push rbx
	push rbp

	mov rbp, rsp

	mov rbx, 10 ; for idiv

	.loop_get_chars:
		mov rdx, 0
		idiv rbx ; divide [rdx:rax] by rbx

		push rdx ; save new digit
		add byte [rsp], '0' ; add code of 0 to get ASCII char code

		cmp rax, 0
		jne .loop_get_chars

	.loop_print:
		mov rax, rsp
		mov rdx, 1
		call print

		add rsp, 8
		cmp rsp, rbp
		jne .loop_print

	mov rsp, rbp

	pop rbp
	pop rbx
	ret

; vim:ft=nasm
